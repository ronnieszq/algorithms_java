import edu.princeton.cs.algs4.ST;
import edu.princeton.cs.algs4.FlowEdge;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdOut;

public class BaseballElimination {
    private final ST<String>, <Integer> teams new ST<String>, <Integer>();
    private final int n;              // number of teams
    private int[] w;                  // wins for all teams
    private int[] l;                  // losses for all teams
    private int[] r;                  // remaining games for all teams
    private int[][] g;                // game metrix
    
    // create a baseball division from given filename
    public BaseballElimination(String filename) {
        // read inputs from a file
        In in = new In(filename);
        n = in.readInt();
        w = new int[n];
        l = new int[n];
        r = new int[n];
        g = new int[n][n];
        for (int i = 0; i < n; i++) {
            teams.put(in.readString(), i);
            w[i] = in.readInt();
            l[i] = in.readInt();
            r[i] = in.readInt();
            for (int j = 0; j < n; j++)
                g[i][j] = readInt();
        }
    }
    
    private class FlowNetwork {
        private static final String NEWLINE = System.getProperty("line.separator");
        private final int V;
        private int E;
        private Bag<FlowEdge>[] adj;
    
        public FlowNetwork(int V) {
            if (V < 0) throw new IllegalArgumentException("Number of vertices in a Graph must be nonnegative");
            this.V = V;
            this.E = 0;
            adj = (Bag<FlowEdge>[]) new Bag[V];
            for (int v = 0; v < V; v++)
                adj[v] = new Bag<FlowEdge>();
        }

        public void addEdge(FlowEdge e) {
            int v = e.from();
            int w = e.to();
            adj[v].add(e);
            adj[w].add(e);
            E++;
        }

        public Iterable<FlowEdge> adj(int v) { return adj[v]; }
            
        public String toString() {
            StringBuilder s = new StringBuilder();
            s.append(V + " " + E + NEWLINE);
            for (int v = 0; v < V; v++) {
                s.append(v + ":  ");
                for (FlowEdge e : adj[v]) {
                    if (e.to() != v) s.append(e + "  ");
                }
                s.append(NEWLINE);
            }
            return s.toString();
        }
    
    // is given team eliminated?
    public boolean isEliminated(String team) {
        int V = n * (n - 1) / 2 + 2;               // number of vertices
        FlowNetwork fn = new FlowNetwork(V);
        for (i = 0; i < n && i != n - 1; i++) {
            for (j = i + 1; j < n && j != n - 1; j++) {
                FlowEdge e = new FlowEdge(i, j, g[i][j]);
                fn.addEdge(e);
            }
        }
        StdOut.print(fn.toString());
    }
    // subset R of teams that eliminates given team; null if not eliminated
    public Iterable<String> certificateOfElimination(String team) {
    }
    
    // number of teams
    public int numberOfTeams() { return n; }
    // all teams
    public Iterable<String> teams() { return teams.keys(); }
    // number of wins for given team
    public int wins(String team) { return w[teams.get(team)]; }      
    // number of losses for given team
    public int losses(String team) { return l[teams.get(team)]; }
    // number of remaining games for given team
    public int remaining(String team) { return r[teams.get(team)]; }
    // number of remaining games between team1 and team2
    public int against(String team1, String team2) { return g[teams.get(team1)][teams.get(team2)]; }
}